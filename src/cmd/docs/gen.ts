#!/usr/bin/env node

import * as linter from "../../";
import {readExtraRules} from "../../cmdutil/reporters";

exports.name = "gen";
exports.describe = "Generate Documentation for rule sets. Will use the Replicated rules by default.";
exports.builder = {
  extraRules: {
    alias: "e",
    describe: "Path to file containing YAML definitions for additional validation rules. Can be specified multiple times.",
    type: "array",
    "default": [],
  },
  excludeDefaults: {
    alias: "x",
    describe: "Exclude default rulesets + schema for replicated yaml, only use rules specified by --extraRules",
    type: "boolean",
    "default": false,
  },
};

exports.handler = main;

export function main(argv) {

  const {extraRules, excludeDefaults} = argv;

  const baseRules: linter.YAMLRule[] =
    excludeDefaults ? [] : linter.rules.all;

  const extra = extraRules.map(readExtraRules);
  const rules = baseRules.concat(...extra);

  rules.forEach(r => {
    console.log(`
## ${"`" + r.name + "`"}

${r.message}

${r.links ? "\n\n#### More Info:" : ""}

${r.links ? r.links.map(l => `- ${l}`).join("\n") : ""}

${r.examples ? "#### Examples:\n" : ""}
${(r.examples && r.examples.wrong) ? r.examples.wrong.map(e => {
      return "*Incorrect*: " + e.description + "\n\n```yaml" + e.yaml + "\n```\n\n";
    }).join("\n") : ""}

${(r.examples && r.examples.right) ? r.examples.right.map(e => {
      return "*Correct*: " + e.description + "\n\n```yaml" + e.yaml + "\n```\n\n";
    }).join("\n") : ""}
    `);
  });

  console.log();
  console.log();
  console.log();
  if (!excludeDefaults) {
    console.log(`Autogenerated reference documentation for [Replicated YAML Linter](https://github.com/replicatedhq/replicated-lint)`);
  }
  console.log(`*Generated at ${new Date()}*`);
  console.log();
}
