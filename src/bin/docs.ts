#!/usr/bin/env node

import { rules } from "../";
import * as pad from "pad";
import * as _ from "lodash";
import { YAMLRule } from "../lint";

// should probably rewrite the tests to use these too someday
export function preRuleDocRules(): YAMLRule[] {
  return [
    {
      name: "mesg-yaml-valid",
      test: {},
      type: "error",
      message: "Document must be valid YAML. This could occur for many reasons, consult individual error details for more info.",
      links: [
          "http://yaml.org/spec/",
          "http://docs.ansible.com/ansible/latest/YAMLSyntax.html",
      ],
    },
    {
      name: "mesg-yaml-not-empty",
      test: {},
      type: "error",
      message: "Document must not be empty",
      examples: {
        wrong: [
          {
            description: "Document may not be empty",
            yaml: `
---
            `,
          },
        ],
        right: [],
      },
    },
    {
      name: "prop-schema-valid",
      test: {},
      type: "error",
      message: "Document must conform to the Replicated YAML document schema",
      links: [
        "https://help.replicated.com/api/yaml#Schema",
      ],
      examples: {
        wrong: [
          {
            description: "Property `deploy_this_great_app` is not present in the schema",
            yaml: `
---
replicated_api_version: "2.10.1"
deploy_this_great_app: plz&thx
            `,
          },
          {
            description: "Property `replicated_api_version` is not of correct type, should be `string`, but `2.11` is parsed as type `float`",
            yaml: `
---
replicated_api_version: 2.11
            `,
          },
        ],
        right: [],
      },
    },
  ];

}

// generate markdown table
export function printTable() {
  const col1 = 52;
  const col2 = 5;
  const col3 = 150;
  const header = {
    name: "Name",
    type: "Type",
    message: "Message",
  };

  console.log(`${pad(header.name, col1)} | ${pad(header.type, col2)} | ${pad(header.message, col3)} |`);
  console.log(`${"-".repeat(col1)}-|-${"-".repeat(col2)}-|-${"-".repeat(col3)} |`);

  rules.all.forEach(r => {
    console.log(`${pad("`" + r.name + "`", col1)} | ${pad(r.type, col2)} | ${pad(r.message, col3)} |`);
  });
}

// print a lot of rules
export function printReference() {

  const allRules = _.concat(rules.all, preRuleDocRules());

  allRules.forEach(r => {
    console.log(`
## ${"`" + r.name + "`"}

${r.message}

${r.links ? "\n\n#### More Info:" : ""}

${r.links ? r.links.map(l => `- ${l}`).join("\n") : ""}

${r.examples ? "#### Examples:\n" : ""}
${(r.examples && r.examples.wrong) ? r.examples.wrong.map(e => {
      return "*Incorrect*: " + e.description + "\n\n```yaml" + e.yaml + "\n```\n\n";
    }).join("\n") : ""}

${(r.examples && r.examples.right) ? r.examples.right.map(e => {
      return "*Correct*: " + e.description + "\n\n```yaml" + e.yaml + "\n```\n\n";
    }).join("\n") : ""}
    `);
  });

  console.log();
  console.log();
  console.log();
  console.log(`Autogenerated reference documentation for [Replicated YAML Linter](https://github.com/replicatedhq/replicated-lint)`);
  console.log(`*Generated at ${new Date()}*`);
  console.log();
}

printReference();
